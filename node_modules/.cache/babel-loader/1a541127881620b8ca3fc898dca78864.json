{"ast":null,"code":"class SearchAndFilter {\n  searchAndFilter(courses, chips, allChips, subject, minimumCredits, maximumCredits) {\n    if (chips.length !== 0 && allChips) {\n      console.log(\"allTags\");\n      let coursesAfterChips = [];\n\n      for (const course of Object.values(courses)) {\n        let courseKeys = course.keywords;\n        var containsAll = chips.every(i => courseKeys.includes(i));\n\n        if (containsAll && !coursesAfterChips.includes(course)) {\n          coursesAfterChips.push(course);\n          break;\n        }\n      }\n\n      courses = coursesAfterChips;\n    }\n\n    if (chips.length !== 0 && !allChips) {\n      console.log(\"anyTag\");\n      let coursesAfterChips = [];\n\n      for (const course of Object.values(courses)) {\n        for (const keyword of course.keywords) {\n          for (const key of chips) {\n            if (keyword.includes(key) && !coursesAfterChips.includes(course)) {\n              coursesAfterChips.push(course);\n              break;\n            }\n          }\n        }\n      }\n\n      courses = coursesAfterChips;\n    }\n\n    if (subject !== 'All') {\n      let coursesAfterSubject = [];\n\n      for (const course of Object.values(courses)) {\n        if (course.subject === subject) coursesAfterSubject.push(course);\n      }\n\n      courses = coursesAfterSubject;\n    }\n\n    if (minimumCredits !== '') {\n      let coursesAfterMinimumCredits = [];\n\n      for (const course of Object.values(courses)) {\n        if (course.credits >= parseInt(minimumCredits)) coursesAfterMinimumCredits.push(course);\n      }\n\n      courses = coursesAfterMinimumCredits;\n    }\n\n    if (maximumCredits !== '') {\n      let coursesAfterMaximumCredits = [];\n\n      for (const course of Object.values(courses)) {\n        if (course.credits <= parseInt(maximumCredits)) coursesAfterMaximumCredits.push(course);\n      }\n\n      courses = coursesAfterMaximumCredits;\n    }\n\n    return courses;\n  }\n\n}\n\nexport default SearchAndFilter;","map":{"version":3,"sources":["/Users/amberwestlund/Desktop/cs639-react-2-awestlund/src/SearchAndFilter.js"],"names":["SearchAndFilter","searchAndFilter","courses","chips","allChips","subject","minimumCredits","maximumCredits","length","console","log","coursesAfterChips","course","Object","values","courseKeys","keywords","containsAll","every","i","includes","push","keyword","key","coursesAfterSubject","coursesAfterMinimumCredits","credits","parseInt","coursesAfterMaximumCredits"],"mappings":"AAAA,MAAMA,eAAN,CAAsB;AACpBC,EAAAA,eAAe,CAACC,OAAD,EAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoCC,cAApC,EAAoDC,cAApD,EAAoE;AACjF,QAAGJ,KAAK,CAACK,MAAN,KAAiB,CAAjB,IAAsBJ,QAAzB,EAAmC;AACjCK,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,UAAIC,iBAAiB,GAAG,EAAxB;;AAEA,WAAI,MAAMC,MAAV,IAAoBC,MAAM,CAACC,MAAP,CAAcZ,OAAd,CAApB,EAA4C;AAC1C,YAAIa,UAAU,GAAGH,MAAM,CAACI,QAAxB;AACA,YAAIC,WAAW,GAAGd,KAAK,CAACe,KAAN,CAAYC,CAAC,IAAIJ,UAAU,CAACK,QAAX,CAAoBD,CAApB,CAAjB,CAAlB;;AACA,YAAGF,WAAW,IAAI,CAACN,iBAAiB,CAACS,QAAlB,CAA2BR,MAA3B,CAAnB,EAAuD;AACrDD,UAAAA,iBAAiB,CAACU,IAAlB,CAAuBT,MAAvB;AACA;AACD;AACF;;AACDV,MAAAA,OAAO,GAAGS,iBAAV;AACD;;AAED,QAAGR,KAAK,CAACK,MAAN,KAAiB,CAAjB,IAAsB,CAACJ,QAA1B,EAAoC;AAClCK,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEA,UAAIC,iBAAiB,GAAG,EAAxB;;AAEA,WAAI,MAAMC,MAAV,IAAoBC,MAAM,CAACC,MAAP,CAAcZ,OAAd,CAApB,EAA4C;AAC1C,aAAI,MAAMoB,OAAV,IAAqBV,MAAM,CAACI,QAA5B,EAAsC;AACpC,eAAI,MAAMO,GAAV,IAAiBpB,KAAjB,EAAwB;AACtB,gBAAGmB,OAAO,CAACF,QAAR,CAAiBG,GAAjB,KAAyB,CAACZ,iBAAiB,CAACS,QAAlB,CAA2BR,MAA3B,CAA7B,EAAiE;AAC/DD,cAAAA,iBAAiB,CAACU,IAAlB,CAAuBT,MAAvB;AACA;AACD;AACF;AACF;AACF;;AACDV,MAAAA,OAAO,GAAGS,iBAAV;AACD;;AAED,QAAGN,OAAO,KAAK,KAAf,EAAsB;AACpB,UAAImB,mBAAmB,GAAG,EAA1B;;AAEA,WAAI,MAAMZ,MAAV,IAAoBC,MAAM,CAACC,MAAP,CAAcZ,OAAd,CAApB,EAA4C;AAC1C,YAAGU,MAAM,CAACP,OAAP,KAAmBA,OAAtB,EACEmB,mBAAmB,CAACH,IAApB,CAAyBT,MAAzB;AACH;;AACDV,MAAAA,OAAO,GAAGsB,mBAAV;AACD;;AAED,QAAGlB,cAAc,KAAK,EAAtB,EAA0B;AACxB,UAAImB,0BAA0B,GAAG,EAAjC;;AAEA,WAAI,MAAMb,MAAV,IAAoBC,MAAM,CAACC,MAAP,CAAcZ,OAAd,CAApB,EAA4C;AAC1C,YAAGU,MAAM,CAACc,OAAP,IAAkBC,QAAQ,CAACrB,cAAD,CAA7B,EACEmB,0BAA0B,CAACJ,IAA3B,CAAgCT,MAAhC;AACH;;AACDV,MAAAA,OAAO,GAAGuB,0BAAV;AACD;;AAED,QAAGlB,cAAc,KAAK,EAAtB,EAA0B;AACxB,UAAIqB,0BAA0B,GAAG,EAAjC;;AAEA,WAAI,MAAMhB,MAAV,IAAoBC,MAAM,CAACC,MAAP,CAAcZ,OAAd,CAApB,EAA4C;AAC1C,YAAGU,MAAM,CAACc,OAAP,IAAkBC,QAAQ,CAACpB,cAAD,CAA7B,EACEqB,0BAA0B,CAACP,IAA3B,CAAgCT,MAAhC;AACH;;AACDV,MAAAA,OAAO,GAAG0B,0BAAV;AACD;;AAED,WAAO1B,OAAP;AACD;;AAlEmB;;AAqEtB,eAAeF,eAAf","sourcesContent":["class SearchAndFilter {\r\n  searchAndFilter(courses, chips, allChips, subject, minimumCredits, maximumCredits) {\r\n    if(chips.length !== 0 && allChips) {\r\n      console.log(\"allTags\");\r\n      let coursesAfterChips = [];\r\n\r\n      for(const course of Object.values(courses)) {\r\n        let courseKeys = course.keywords;\r\n        var containsAll = chips.every(i => courseKeys.includes(i));\r\n        if(containsAll && !coursesAfterChips.includes(course)) {\r\n          coursesAfterChips.push(course);\r\n          break;\r\n        }\r\n      }\r\n      courses = coursesAfterChips;\r\n    }\r\n\r\n    if(chips.length !== 0 && !allChips) {\r\n      console.log(\"anyTag\");\r\n\r\n      let coursesAfterChips = [];\r\n\r\n      for(const course of Object.values(courses)) {\r\n        for(const keyword of course.keywords) {\r\n          for(const key of chips) {\r\n            if(keyword.includes(key) && !coursesAfterChips.includes(course)) {\r\n              coursesAfterChips.push(course);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      courses = coursesAfterChips;\r\n    }\r\n\r\n    if(subject !== 'All') {\r\n      let coursesAfterSubject = [];\r\n\r\n      for(const course of Object.values(courses)) {\r\n        if(course.subject === subject)\r\n          coursesAfterSubject.push(course)\r\n      }\r\n      courses = coursesAfterSubject;\r\n    }\r\n\r\n    if(minimumCredits !== '') {\r\n      let coursesAfterMinimumCredits = [];\r\n\r\n      for(const course of Object.values(courses)) {\r\n        if(course.credits >= parseInt(minimumCredits))\r\n          coursesAfterMinimumCredits.push(course);\r\n      }\r\n      courses = coursesAfterMinimumCredits;\r\n    }\r\n\r\n    if(maximumCredits !== '') {\r\n      let coursesAfterMaximumCredits = [];\r\n\r\n      for(const course of Object.values(courses)) {\r\n        if(course.credits <= parseInt(maximumCredits))\r\n          coursesAfterMaximumCredits.push(course);\r\n      }\r\n      courses = coursesAfterMaximumCredits;\r\n    }\r\n\r\n    return courses;\r\n  }\r\n}\r\n\r\nexport default SearchAndFilter; \r\n"]},"metadata":{},"sourceType":"module"}